// Mocks generated by Mockito 5.4.5 from annotations
// in rtm_visits/test/widget/visit_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rtm_visits/features/customers/domain/usecases/get_customers.dart'
    as _i7;
import 'package:rtm_visits/features/customers/presentation/bloc/customer_bloc.dart'
    as _i8;
import 'package:rtm_visits/features/visits/domain/usecases/add_visit.dart'
    as _i3;
import 'package:rtm_visits/features/visits/domain/usecases/delete_visit.dart'
    as _i5;
import 'package:rtm_visits/features/visits/domain/usecases/get_visits.dart'
    as _i2;
import 'package:rtm_visits/features/visits/domain/usecases/update_visit.dart'
    as _i4;
import 'package:rtm_visits/features/visits/presentation/bloc/visit_bloc.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetVisits_0 extends _i1.SmartFake implements _i2.GetVisits {
  _FakeGetVisits_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddVisit_1 extends _i1.SmartFake implements _i3.AddVisit {
  _FakeAddVisit_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateVisit_2 extends _i1.SmartFake implements _i4.UpdateVisit {
  _FakeUpdateVisit_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteVisit_3 extends _i1.SmartFake implements _i5.DeleteVisit {
  _FakeDeleteVisit_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVisitState_4 extends _i1.SmartFake implements _i6.VisitState {
  _FakeVisitState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCustomers_5 extends _i1.SmartFake implements _i7.GetCustomers {
  _FakeGetCustomers_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCustomerState_6 extends _i1.SmartFake implements _i8.CustomerState {
  _FakeCustomerState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VisitBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitBloc extends _i1.Mock implements _i6.VisitBloc {
  MockVisitBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetVisits get getVisits => (super.noSuchMethod(
        Invocation.getter(#getVisits),
        returnValue: _FakeGetVisits_0(
          this,
          Invocation.getter(#getVisits),
        ),
      ) as _i2.GetVisits);

  @override
  _i3.AddVisit get addVisit => (super.noSuchMethod(
        Invocation.getter(#addVisit),
        returnValue: _FakeAddVisit_1(
          this,
          Invocation.getter(#addVisit),
        ),
      ) as _i3.AddVisit);

  @override
  _i4.UpdateVisit get updateVisit => (super.noSuchMethod(
        Invocation.getter(#updateVisit),
        returnValue: _FakeUpdateVisit_2(
          this,
          Invocation.getter(#updateVisit),
        ),
      ) as _i4.UpdateVisit);

  @override
  _i5.DeleteVisit get deleteVisit => (super.noSuchMethod(
        Invocation.getter(#deleteVisit),
        returnValue: _FakeDeleteVisit_3(
          this,
          Invocation.getter(#deleteVisit),
        ),
      ) as _i5.DeleteVisit);

  @override
  _i6.VisitState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeVisitState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.VisitState);

  @override
  _i9.Stream<_i6.VisitState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i6.VisitState>.empty(),
      ) as _i9.Stream<_i6.VisitState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i6.VisitEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i6.VisitEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.VisitState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i6.VisitEvent>(
    _i10.EventHandler<E, _i6.VisitState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i10.Transition<_i6.VisitEvent, _i6.VisitState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void onChange(_i10.Change<_i6.VisitState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CustomerBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerBloc extends _i1.Mock implements _i8.CustomerBloc {
  MockCustomerBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetCustomers get getCustomers => (super.noSuchMethod(
        Invocation.getter(#getCustomers),
        returnValue: _FakeGetCustomers_5(
          this,
          Invocation.getter(#getCustomers),
        ),
      ) as _i7.GetCustomers);

  @override
  _i8.CustomerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCustomerState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.CustomerState);

  @override
  _i9.Stream<_i8.CustomerState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i8.CustomerState>.empty(),
      ) as _i9.Stream<_i8.CustomerState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i8.CustomerEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.CustomerEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.CustomerState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.CustomerEvent>(
    _i10.EventHandler<E, _i8.CustomerState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i10.Transition<_i8.CustomerEvent, _i8.CustomerState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void onChange(_i10.Change<_i8.CustomerState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
