// Mocks generated by Mockito 5.4.5 from annotations
// in rtm_visits/test/unit/visit_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i6;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rtm_visits/features/visits/data/datasources/visit_local_data_source.dart'
    as _i5;
import 'package:rtm_visits/features/visits/data/datasources/visit_remote_data_source.dart'
    as _i3;
import 'package:rtm_visits/features/visits/data/models/visit_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVisitModel_0 extends _i1.SmartFake implements _i2.VisitModel {
  _FakeVisitModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VisitRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitRemoteDataSource extends _i1.Mock
    implements _i3.VisitRemoteDataSource {
  MockVisitRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.VisitModel>> getVisits() => (super.noSuchMethod(
        Invocation.method(
          #getVisits,
          [],
        ),
        returnValue: _i4.Future<List<_i2.VisitModel>>.value(<_i2.VisitModel>[]),
      ) as _i4.Future<List<_i2.VisitModel>>);

  @override
  _i4.Future<_i2.VisitModel> addVisit(_i2.VisitModel? visit) =>
      (super.noSuchMethod(
        Invocation.method(
          #addVisit,
          [visit],
        ),
        returnValue: _i4.Future<_i2.VisitModel>.value(_FakeVisitModel_0(
          this,
          Invocation.method(
            #addVisit,
            [visit],
          ),
        )),
      ) as _i4.Future<_i2.VisitModel>);

  @override
  _i4.Future<_i2.VisitModel> updateVisit(_i2.VisitModel? visit) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVisit,
          [visit],
        ),
        returnValue: _i4.Future<_i2.VisitModel>.value(_FakeVisitModel_0(
          this,
          Invocation.method(
            #updateVisit,
            [visit],
          ),
        )),
      ) as _i4.Future<_i2.VisitModel>);

  @override
  _i4.Future<void> deleteVisit(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisit,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [VisitLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitLocalDataSource extends _i1.Mock
    implements _i5.VisitLocalDataSource {
  MockVisitLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.VisitModel>> getVisits() => (super.noSuchMethod(
        Invocation.method(
          #getVisits,
          [],
        ),
        returnValue: _i4.Future<List<_i2.VisitModel>>.value(<_i2.VisitModel>[]),
      ) as _i4.Future<List<_i2.VisitModel>>);

  @override
  _i4.Future<void> cacheVisits(List<_i2.VisitModel>? visits) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheVisits,
          [visits],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cacheVisit(_i2.VisitModel? visit) => (super.noSuchMethod(
        Invocation.method(
          #cacheVisit,
          [visit],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteVisit(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisit,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i6.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i7.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i4.Stream<List<_i7.ConnectivityResult>>.empty(),
      ) as _i4.Stream<List<_i7.ConnectivityResult>>);

  @override
  _i4.Future<List<_i7.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i4.Future<List<_i7.ConnectivityResult>>.value(
            <_i7.ConnectivityResult>[]),
      ) as _i4.Future<List<_i7.ConnectivityResult>>);
}
